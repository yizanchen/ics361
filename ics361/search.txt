(defun generate-descendants (state moves)
  (declare (special *open*)
           (special *closed*))
  (cond ((null moves) nil)
        (t (let ((child (funcall (car moves) state))
                 (rest (generate-descendants state (cdr moves))))
             (cond ((null child) rest)
                   ((member child rest :test #'equal) rest)
                   ((member child *open* :test #'equal) rest)
                   ((member child *closed* :test #'equal) rest)
                   (t (cons child rest)))))))


(defun run-dept (start goal)
  (declare (special *open*)
           (special *closed*)
           (special *goal*))
  (setq *open* (list start))
  (setq *closed* nil)
  (setq *goal* goal)
   (dept-first))


(defun dept-first ()
  (declare (special *open*)
           (special *closed*)
           (special *goal*)
           (special *moves*))
  (cond ((null *open*) nil)
          (t (let ((state (car *open*)))
		(format t "first open list:~a~a~%"(car *open*) (setq *count* (+ *count* 1))  )
	   	 (cond ((equal state *goal*) 
			(format t "Length of Closed:~a~%Length of Open:~a~%Solution path:~a~%  "    
	       		(Length *closed*) (Length *open*)(reverse *path*) )) 
          		(t  (setq *path* (cons state *path*)) (setq *closed* (cons state *closed*)) 
			    (setq *open* 
                            (append (generate-descendants state *moves*)(cdr *open*) ))
                      (dept-first)))))))


(defun run-breadth (start goal)
  (declare (special *open*)
           (special *closed*)
           (special *goal*))
  (setq *open* (list start))
  (setq *closed* nil)
  (setq *goal* goal)
  (breadth-first))


(defun breadth-first ()
  (declare (special *open*)
           (special *closed*)
           (special *goal*)
           (special *moves*))
  (cond ((null *open*) nil)
          (t (let ((state (car *open*)))
		(format t "first open list:~a~a~%"(car *open*) (setq *count* (+ *count* 1))  )
				
	   	 (cond ((equal state *goal*) 
			(format t "Length of Closed:~a~%Length of Open:~a~%Solution path:~a~%  "    
	       	        (Length *closed*) (Length *open*)(reverse *path*) )) 
          		(t (setq *path* (cons state *path*)) (setq *closed* (cons state *closed*)) 
		   	   (setq *open* 
                            (append (cdr *open*)  (generate-descendants state *moves*)))
                      (breadth-first)))))))