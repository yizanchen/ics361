(defparameter *moves* '(nup nleft nright ndown))
(defparameter *open* nil )
(defparameter *closed* nil )

(defun build-record (state parent depth weight) 
  (list state parent depth weight))
(defun heuristic (state)
  (declare (special *goal*))
  (heuristic-eval state *goal*))

 (defun heuristic-eval (state goal)
 (cond ((null state) 0)
        ((equal (car state) (car goal)) 
        (heuristic-eval (cdr state) (cdr goal)))
        (t (1+ (heuristic-eval (cdr state) (cdr goal))))))

(defun insert-by-weight (children sorted-list)
  (cond ((null children) sorted-list)
        (t (insert (car children) 
           (insert-by-weight (cdr children) sorted-list)))))

(defun insert (item sorted-list)
  (cond ((null sorted-list) (list item))
        ((< (get-weight item) (get-weight (car sorted-list)))
         (cons item sorted-list))
        (t (cons (car sorted-list) (insert item (cdr sorted-list))))))

(defun get-state (state-tuple) (nth 0 state-tuple))

(defun get-parent (state-tuple) (nth 1 state-tuple))

(defun get-depth (state-tuple) (nth 2 state-tuple))

(defun get-weight (state-tuple) (nth 3 state-tuple))

(defun retrieve-by-state (state list)
  (cond ((null list) nil)
        ((equal state (get-state (car list))) (car list))
        (t (retrieve-by-state state (cdr list)))))

(defun generate-descendants (state depth moves)
  (declare (special *closed*)
           (special *open*))
  (cond ((null moves) nil)
        (t (let ((child (funcall (car moves) state))
                 (rest (generate-descendants state depth (cdr moves))))
             (cond ((null child) rest)
                   ((retrieve-by-state child rest) rest)
                   ((retrieve-by-state child *open*) rest)
                   ((retrieve-by-state child *closed*) rest)
                   (t (cons (build-record child state depth 
                                          (+ depth (heuristic child))) 
                            rest)))))))

(defun build-solution (state)
  (declare (special *closed*))
  (cond ((null state) nil)
        (t (cons state (build-solution 
                        (get-parent 
                         (retrieve-by-state state *closed*)))))))

(defun r1(state)
     (list (car state) (cadr state) (caddr state)))
(defun r2(state)
    (list (nth 3 state) (nth 4 state) (nth 5 state)))
(defun r3(state)
    (list (nth 6 state) (nth 7 state) (nth 8 state)))
(defun c1(state)
    (list (nth 0 state) (nth 3 state) (nth 6 state)))
(defun c2(state)
    (list (nth 1 state) (nth 4 state) (nth 7 state)))
(defun c3(state)
    (list (nth 2 state) (nth 5 state) (nth 8 state)))

(defun ndown(state)
    (cond
        (  (member '0 (r3 state)) nil )
        (  (member '0 (r1 state)) 
            (cond 
                ( (eq (position '0 state) 0) 
                   (list (nth 3 state) (nth 1 state) (nth 2 state)
                   (nth 0 state) (nth 4 state) (nth 5 state) 
                   (nth 6 state) (nth 7 state) (nth 8 state) ))
                ( (eq (position '0 state) 1)
                   (list (nth 0 state) (nth 4 state) (nth 2 state)
                   (nth 3 state) (nth 1 state) (nth 5 state) 
                   (nth 6 state) (nth 7 state) (nth 8 state) ))
                (t (list (nth 0 state) (nth 1 state) (nth 5 state)
                   (nth 3 state) (nth 4 state) (nth 2 state) 
                   (nth 6 state) (nth 7 state) (nth 8 state) )))) 
        (  (member '0 (r2 state))
             (cond 
                ( (eq (position '0 state) 3) 
                   (list (nth 0 state) (nth 1 state) (nth 2 state)
                   (nth 6 state) (nth 4 state) (nth 5 state) 
                   (nth 3 state) (nth 7 state) (nth 8 state) ))
                ( (eq (position '0 state) 4)
                   (list (nth 0 state) (nth 1 state) (nth 2 state)
                   (nth 3 state) (nth 7 state) (nth 5 state) 
                   (nth 6 state) (nth 4 state) (nth 8 state) ))
                (t (list (nth 0 state) (nth 1 state) (nth 2 state)
                   (nth 3 state) (nth 4 state) (nth 8 state) 
                   (nth 6 state) (nth 7 state) (nth 5 state) ))))))


(defun nup(state)
    (cond
        (  (member '0 (r1 state)) nil )
        (  (member '0 (r2 state)) 
            (cond 
                ( (eq (position '0 state) 3) 
                   (list (nth 3 state) (nth 1 state) (nth 2 state)
                   (nth 0 state) (nth 4 state) (nth 5 state) 
                   (nth 6 state) (nth 7 state) (nth 8 state) ))
                ( (eq (position '0 state) 4)
                   (list (nth 0 state) (nth 4 state) (nth 2 state)
                   (nth 3 state) (nth 1 state) (nth 5 state) 
                   (nth 6 state) (nth 7 state) (nth 8 state) ))
                (t (list (nth 0 state) (nth 1 state) (nth 5 state)
                   (nth 3 state) (nth 4 state) (nth 2 state) 
                   (nth 6 state) (nth 7 state) (nth 8 state) )))) 
        (  (member '0 (r3 state))
             (cond 
                ( (eq (position '0 state) 6) 
                   (list (nth 0 state) (nth 1 state) (nth 2 state)
                   (nth 6 state) (nth 4 state) (nth 5 state) 
                   (nth 3 state) (nth 7 state) (nth 8 state) ))
                ( (eq (position '0 state) 7)
                   (list (nth 0 state) (nth 1 state) (nth 2 state)
                   (nth 3 state) (nth 7 state) (nth 5 state) 
                   (nth 6 state) (nth 4 state) (nth 8 state) ))
                (t (list (nth 0 state) (nth 1 state) (nth 2 state)
                   (nth 3 state) (nth 4 state) (nth 8 state) 
                   (nth 6 state) (nth 7 state) (nth 5 state) ))))))    
 
(defun nleft(state)
    (cond
        ( (member '0 (c1 state)) nil)
        ( (member '0 (c2 state))
                (cond 
                ( (eq (position '0 state) 1) 
                   (list (nth 1 state) (nth 0 state) (nth 2 state)
                   (nth 3 state) (nth 4 state) (nth 5 state) 
                   (nth 6 state) (nth 7 state) (nth 8 state) ))
                ( (eq (position '0 state) 4)
                   (list (nth 0 state) (nth 1 state) (nth 2 state)
                   (nth 4 state) (nth 3 state) (nth 5 state) 
                   (nth 6 state) (nth 7 state) (nth 8 state) ))
                (t (list (nth 0 state) (nth 1 state) (nth 2 state)
                   (nth 3 state) (nth 4 state) (nth 5 state) 
                   (nth 7 state) (nth 6 state) (nth 8 state) ))))
         ( (member '0 (c3 state))
              (cond 
                ( (eq (position '0 state) 2) 
                   (list (nth 0 state) (nth 2 state) (nth 1 state)
                   (nth 3 state) (nth 4 state) (nth 5 state) 
                   (nth 6 state) (nth 7 state) (nth 8 state) ))
                ( (eq (position '0 state) 5)
                   (list (nth 0 state) (nth 1 state) (nth 2 state)
                   (nth 3 state) (nth 5 state) (nth 4 state) 
                   (nth 6 state) (nth 7 state) (nth 8 state) ))
                (t (list (nth 0 state) (nth 1 state) (nth 2 state)
                   (nth 3 state) (nth 4 state) (nth 5 state) 
                   (nth 6 state) (nth 8 state) (nth 7 state) ))))))
(defun nright(state)
    (cond
        ( (member '0 (c3 state)) nil)
        ( (member '0 (c1 state))
                (cond 
                ( (eq (position '0 state) 0) 
                   (list (nth 1 state) (nth 0 state) (nth 2 state)
                   (nth 3 state) (nth 4 state) (nth 5 state) 
                   (nth 6 state) (nth 7 state) (nth 8 state) ))
                ( (eq (position '0 state) 3)
                   (list (nth 0 state) (nth 1 state) (nth 2 state)
                   (nth 4 state) (nth 3 state) (nth 5 state) 
                   (nth 6 state) (nth 7 state) (nth 8 state) ))
                (t (list (nth 0 state) (nth 1 state) (nth 2 state)
                   (nth 3 state) (nth 4 state) (nth 5 state) 
                   (nth 7 state) (nth 6 state) (nth 8 state) ))))
         ( (member '0 (c2 state))
              (cond 
                ( (eq (position '0 state) 1) 
                   (list (nth 0 state) (nth 2 state) (nth 1 state)
                   (nth 3 state) (nth 4 state) (nth 5 state) 
                   (nth 6 state) (nth 7 state) (nth 8 state) ))
                ( (eq (position '0 state) 4)
                   (list (nth 0 state) (nth 1 state) (nth 2 state)
                   (nth 3 state) (nth 5 state) (nth 4 state) 
                   (nth 6 state) (nth 7 state) (nth 8 state) ))
                (t (list (nth 0 state) (nth 1 state) (nth 2 state)
                   (nth 3 state) (nth 4 state) (nth 5 state) 
                   (nth 6 state) (nth 8 state) (nth 7 state) ))))))
(defun best-first ()
  (declare (special *goal*)
           (special *open*)
           (special *closed*)
           (special *moves*))
  (format t "first nodes in open:~a~%" (car *open*))

  (cond ((null *open*) nil)
        (t (let ((state (car *open*)))
             (setf *closed* (cons state *closed*))
             (cond ((equal (get-state state) *goal*)(format t "Length of open:~a~%Length of closed:~a~%" (Length *open*)(Length *closed*)  ) (  format t "solution path:~a~%" (reverse (build-solution *goal*))))
                   (t (setf *open* 
                            (insert-by-weight 
                                    (generate-descendants (get-state state)
                                                          (1+ (get-depth state))
                                                          *moves*)
                                    (cdr *open*)))
                      (best-first)))))))
(defun run-best (start goal)
  (declare (special *goal*)
           (special *open*)
           (special *closed*))
  (setf *goal* goal)
  (setf *open* (list (build-record start nil 0 (heuristic start))))
  (setf *closed* nil)
  (best-first))